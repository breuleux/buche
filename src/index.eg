
require:
   electron ->
      app, BrowserWindow, ipc-main
   fs
   path
   minimist
   shell-escape
   child_process ->
      spawn
   open
   ..package -> version
   .registry -> get-config

var main-window = null
var proc = null

usage = """
Usage: buche [options] [command]

Options:

  -v, --version        Output the version number.
  --dev                Open developer console.
  --tee [file]         File to log the command's stdout to.
  --inspect            Print stdout and stdin.
  -h, --help           Output usage information.
"""

options = parse-options(process.argv[2...]) where parse-options(argv) =
   var help = false
   config = {
      boolean = {'dev', 'inspect', 'version', 'help'}
      string = {'tee'}
      alias = {
         v = .version
         h = .help
         t = .tee
      }
      stop-early = true
      unknown(match x) =
         R"^-"? ->
            console.error('Unknown option: {x}')
            help = true
            false
         else ->
            true
   }
   opts = minimist(argv, config)
   if help or opts.help:
      console.error(usage)
      process.exit(1)
   if opts.version:
      print 'Buche v{version}'
      process.exit(1)
   opts.cmd = match opts._:
      {cmd} -> cmd
      args -> shell-escape(args)
   opts


create-window() =
   config = get-config()
   
   cmd =
      if options.cmd:
         if options.tee:
            '{options.cmd} | tee {options.tee}'
         else:
            options.cmd
      elif options.tee:
         print '--tee only works with -c option for now.'
         process.exit(1)
      else:
         null

   w = new BrowserWindow with {
      width = 1200
      height = 900
      web-preferences = {
         experimental-features = true
      }
   }

   w.loadURL('file://{__dirname}/../html/index.html')
   if options.dev:
      w.web-contents.open-dev-tools(mode = .bottom)
   w.on(.closed) with {} ->
      main-window = null

   handle-redirect(e, url) =
      if url != w.web-contents.getURL():
        e.preventDefault()
        open(url)

   w.web-contents.on('will-navigate', handle-redirect)
   w.web-contents.on('new-window', handle-redirect)

   ipc-main.on(.ready) with ->
      var origins = {}
      if cmd:
         print 'Using command: {cmd}'
         proc = spawn(cmd, {}) with {
            shell = true
            stdio = {.pipe, .pipe, .pipe} ;; process.stderr}
         }
         proc.on(.error) with err ->
            print 'Failed to start process.'
            print err
         origins = {proc.stdout, proc.stderr}
         ipc-main.on(.data) with {_, data} ->
            if options.inspect:
               print '<- {data}'
            proc.stdin.write(data + '\n')
      else:
         origins = {process.stdin}
         ipc-main.on(.data) with {_, data} ->
            console.error('Cannot receive data!')
            console.error(JSON.stringify(data))
      origins each origin ->
         origin.set-encoding(.utf8)
         origin.on(.data) with data ->
            if options.inspect:
               data.split('\n') each line when line ->
                  print '-> {line}'
            w.web-contents.send(.data, data)
         origin.on(.end) with -> ->
            w.web-contents.send(.end)

app.on('ready', create-window)

app.on("window-all-closed") with {} ->
   app.quit()
   if proc:
      proc.stdin.end()

app.on(.activate) with {} ->
   if main-window === null:
      create-window()
