
require:
   electron ->
      app, BrowserWindow, ipc-main
   fs
   path
   commander
   child_process ->
      spawn
   open
   ..package -> version

var main-window = null
var proc = null

create-window() =
   options =
      chain commander:
        @version(version)
        @option('--dev', 'Open developer console.')
        @option('-c, --cmd [command]', 'Command to execute.')
        @option('--tee [file]', 'File to log the command\'s stdout to.')
        @parse(process.argv)

   cmd =
      if options.cmd:
         if options.tee:
            '{options.cmd} | tee {options.tee}'
         else:
            options.cmd
      else:
         null

   w = new BrowserWindow with {
      width = 1200
      height = 900
      web-preferences = {
         experimental-features = true
      }
   }

   w.loadURL('file://{__dirname}/../html/index.html')
   if options.dev:
      w.web-contents.open-dev-tools(mode = .bottom)
   w.on(.closed) with {} ->
      main-window = null

   handle-redirect(e, url) =
      if url != w.web-contents.getURL():
        e.preventDefault()
        open(url)

   w.web-contents.on('will-navigate', handle-redirect)
   w.web-contents.on('new-window', handle-redirect)

   ipc-main.on(.ready) with ->
      var origins = {}
      if cmd:
         print 'Using command: {cmd}'
         proc = spawn(cmd, {}) with {
            shell = true
            stdio = {.pipe, .pipe, .pipe} ;; process.stderr}
         }
         proc.on(.error) with err ->
            print 'Failed to start process.'
            print err
         origins = {proc.stdout, proc.stderr}
         ipc-main.on(.data) with {_, data} ->
            proc.stdin.write(data + '\n')
      else:
         origins = {process.stdin}
         ipc-main.on(.data) with {_, data} ->
            console.error('Cannot receive data!')
            console.error(JSON.stringify(data))
      origins each origin ->
         origin.set-encoding(.utf8)
         origin.on(.data) with data ->
            w.web-contents.send(.data, data)
         origin.on(.end) with -> ->
            w.web-contents.send(.end)

app.on('ready', create-window)

app.on("window-all-closed") with {} ->
   app.quit()
   if proc:
      proc.stdin.end()

app.on(.activate) with {} ->
   if main-window === null:
      create-window()

