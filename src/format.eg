
require:
   /dom
   path
   marked
   "highlight.js" as hljs

provide:
   format

globals:
   document


fix-script-tags(node) =
   ;; <script> tags creates through setting innerHTML won't run.
   ;; This method fixes that behavior by replacing all script tags
   ;; by explicitly built nodes.
   node.query-selector-all('script') each s ->
      s2 = document.create-element('script')
      s2.type = s.type
      if s.src:
         s2.src = s.src
      s2.text-content = s.text-content
      s.parent-node.replace-child(s2, s)


re-source(root, dir) =
   helper(node, attr) =
      match node.get-attribute(attr):
         R"^/"? ->
            pass
         R"://"? ->
            pass
         p ->
            node.set-attribute(attr, path.join(dir, p))

   root.query-selector-all('a, link') each node ->
      helper(node, 'href')
   root.query-selector-all('img, script, iframe') each node ->
      helper(node, 'src')


extract-raw(text, directory) =
   dummy = document.create-element('div')
   dummy.innerHTML = text
   if directory:
      re-source(dummy, directory)
   fix-script-tags(dummy)
   match consume(dummy.child-nodes):
      {x} ->
         x
      xs ->
         xs


formats = {

   direct(node, options) =
      node

   enode(enode, options) =
      dom(enode)

   text(text, options) =
      document.create-text-node(text)

   source(code, options) =
      match options.language:
         undefined? ->
            dom with
               pre % code
         lang when hljs.get-language(lang) ->
            node = dom with pre %
            node.innerHTML = hljs.highlight(lang, code).value
            node
         else ->
            dom with
               pre % code

   stdout(text, options) =
      dom with
         span.stdout % text

   markdown(text, options) =
      rval = document.create-element('div')
      rval.innerHTML = marked(text) with {
         highlight(code, match lang) =
            undefined? ->
               code
            when hljs.get-language(lang) ->
               hljs.highlight(lang, code).value
            else ->
               code
      }
      if options.directory:
         re-source(rval, options.directory)
      rval

   html(text, options) =
      extract-raw(text, options.directory)

   ;; Aliases

   md = .markdown
   txt = .text
}


format(fmt, obj) =
   {name, options} = match fmt:
      String? ->
         {fmt, {name = fmt}}
      {=> name} ->
         {name, fmt}
      else ->
         throw new Error with
            'Cannot parse format: "{fmt}"'

   var formatter = formats[name]
   while String? formatter:
      formatter = formats[formatter]
   if not formatter:
      throw new Error with
         'Unknown format: "{name}"'
   return formatter(obj, options)
