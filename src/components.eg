
require:
   /dom
   .util -> css
   jquery as jq


provide:
   Custom
   CustomNoShadow
   install-components


globals:
   document
   Text
   HTMLElement
   custom-elements


jsclass Custom < HTMLElement:

   attached-callback() =
      if not @shadow:
         @shadow = @attach-shadow with {mode = .open}
         @setup()
         @shadow.append-child(dom(css(@css())))
         Array! tpl = @template()
         tpl each t ->
            @shadow.append-child(dom(t))

   setup() =
      pass

   template() =
      div %

   css() =
      {=}


jsclass CustomNoShadow < HTMLElement:

   attached-callback() =
      if not @has-setup:
         @has-setup = true
         @setup()
         children = @child-nodes each
            Text? t -> t.text-content
            x -> x
         jq(@).empty()
         Array! tpl = @template(children)
         tpl each t ->
            super.append-child(dom(t))
         super.append-child(dom(css(@css())))

   setup() =
      pass

   template(_) =
      div %

   css() =
      {=}


jsclass ChannelTabs < Custom:
   setup() =
      @anchor = @get-attribute('anchor') or 'top'
      @active = null
      @nchannels = 0

   template() =
      anchor-tag = '.tabs-{@anchor}'
      @element-select = dom with div.tabs-select.hide %
      @element-panes = dom with div.tabs-panes %
      div.tabs-area[^anchor-tag] %
         @element-select
         @element-panes

   make-tab(spec) =
      dom with
         div.tab %
            spec.tab-elem
            onclick() =
               @select(spec)

   add(tab-elem, pane-elem) =
      spec = {= tab-elem, = pane-elem}
      spec.tab = @make-tab(spec)
      spec.holder = dom(div % pane-elem)
      @element-select.append-child(spec.tab)
      @element-panes.append-child(spec.holder)
      if not @active:
         @select(spec)
      @nchannels += 1
      if @nchannels > 1 or tab-elem != '_':
         @element-select.class-list.remove(.hide)

   select(spec) =
      if @active:
         @active.tab.class-list.remove(.active)
         @active.holder.class-list.remove(.active)
      spec.tab.class-list.add(.active)
      spec.holder.class-list.add(.active)
      @active = spec

   css() = {
      ".tabs-area" = {
         width = "100%"
         height = "100%"
         display = "flex"
         flex-direction = "column"
      }
      ".tabs-area.tabs-top" = {
        flex-direction = "column"
      }

      ".tabs-area.tabs-left" = {
        flex-direction = "row"
      }

      ".tabs-top > .tabs-select.hide" = {
        display = "none"
      }

      ".tabs-left > .tabs-select.hide" = {
        display = "none"
      }

      ".tabs-top > .tabs-select" = {
        width = "100%"
        height = "auto"
        background = "#aaf"
        display = "flex"
        flex-direction = "row"
        overflow = "auto"
      }

      ".tabs-left > .tabs-select" = {
        width = "auto"
        height = "100%"
        background = "#88f"
        display = "flex"
        flex-direction = "column"
        overflow = "auto"
      }

      ".tabs-panes" = {
        flex = "1"
        overflow = "auto"
      }

      ".tab" = {
        cursor = "pointer"
        padding-left = "5px"
        padding-right = "5px"
        padding-top = "2px"
        padding-bottom = "2px"
      }

      ".tabs-panes > *" = {
        display = "none"
        height = "100%"
      }

      ".tabs-panes > .active" = {
        display = "block"
      }

      ".tab.active" = {
        background = "white"
      }
   }


jsclass ChannelLog < Custom:

   setup() =
      @is-setup = true
      @scrolled-down = true
      @has-input = @get-attribute('input') == "true"

   template() =
      @scrolled-down = true
      @area = dom with
         div.log-area %
            onscroll(e) =
               a = @jqarea
               @scrolled-down =
                  a[0].scroll-height - a.scroll-top() == a.outer-height()
            @child-nodes each x -> x
      @jqarea = jq(@area)
      @input = dom with
         input.log-input %
            onkeydown(e) =
               if e.key == 'Enter':
                  @onsubmit(e)
      if @has-input:
         {@area, @input}
      else:
         @area

   css() = {
      ":host" = {
         display = .flex
         flex-direction = .column
         height = "100%"
      }

      ".log-area" = {
         flex = 1
         overflow = .auto
         margin-left = '5px'
      }

      ".log-input" = {
         background = '#eee'
         padding = '5px'
         font-size = '14px'
         border = 'none'
         outline = 'none'
      }

      ".log-area > *" = {
         padding-left = '20px'
         margin-left = '5px'
      }

      ".log-area > * > *" = {
         display = "inline-block"
      }

      "style" = {
         display = "none !IMPORTANT"
      }

      ".log-area > .echo" = {
         border-left = '15px solid green'
         margin-left = '0px'
         padding-left = '15px'
         background-color = '#eee'
      }

      ".log-area > .log" = {
         padding-left = '20px'
      }

      ".log-area > .result" = {
         border-left = '5px solid blue'
      }

      ".log-area > .error" = {
         border-left = '5px solid red'
      }

      ".log-area > .warning" = {
         border-left = '5px solid orange'
      }
   }

   add(child, kind = .log) =
      wrapped-child = dom(div[^'.{kind}'] % child)
      if @area:
         @area.append-child(wrapped-child)
         if @scrolled-down:
            set-timeout(f, 0) where f() =
               @jqarea.scroll-top(@area.scroll-height)
      else:
         super.append-child(wrapped-child)

   append-child(child) =
      @add(child)


install-components() =
   document.register-element('channel-log', ChannelLog)
   document.register-element('channel-tabs', ChannelTabs)

