
require:
   node-uuid as uuid
   events -> EventEmitter
   /dom

provide:
   channel-constructors

class LogChannel < EventEmitter:
   label-editable = true

   constructor(message, @target) =
      @area = dom(div.log-area %)
      @target.append-child(@area)
      @sub-channels = {=}

   get-sub-channel(name, message, type = .log) =
      if @sub-channels[name] as sch:
         sch
      else:
         expr-value @sub-channels[name] =
            channel-constructors[type](message, @area)

   parse-sub-channel(m) =
      if m.path is '/':
         return {false, m}
      {_, sub-path, *rest} = m.path.split('/')
      sub-m = m & {path = '/' + rest.join('/')}
      return {sub-path, sub-m}

   dispatch(m) =
      {sub-path, sub-m} = @parse-sub-channel(m)
      if sub-path:
         ch = @get-sub-channel(sub-path, sub-m, sub-m.type or .log)
         if sub-m.command !== .open:
            ch.dispatch(sub-m)
      elif m.command is .log:
         element =
            match m.format:
               .html ->
                  div[raw] % m.contents
               .markdown ->
                  require: marked
                  div[raw] % marked.inline-lexer(m.contents, {})
               .quaint ->
                  require: quaint
                  div[raw] % quaint.toHTML(m.contents)
               else ->
                  div % m.contents
         @area.append-child(dom(element))
      elif m.command is .clear:
         while @area.first-child:
            @area.remove-child(@area.first-child)
      else:
         console.error('log channel does not know command {m.command}.')

channel-constructors = {
   log = LogChannel
   error = LogChannel
}
