
require:
   events -> EventEmitter
   /dom
   jquery as jq


provide:
   Channel


jsclass UnrecognizedCommandError < Error:
   constructor(m, @channel) =
      super('Unrecognized command: {m.command}')
      @command = m.command
      @message-object = m


make-resources(m and {type => match}) =
   .direct ->
      node = dom with div[raw] % m.contents
      node.child-nodes
   .script ->
      {dom(___)} with
         if m.source:
            then:
               script %
                  src = m.source
            else:
               script[raw] %
                  m.contents
   .style ->
      {dom(___)} with
         if m.source:
            then:
               link %
                  type = 'text/css'
                  rel = 'stylesheet'
                  href = m.source
            else:
               style[raw] %
                  m.contents
   else ->
      throw new Error('Unrecognized resource type: {m.type}')


jsclass Channel < EventEmitter:
   constructor(@master, @options) =
      super()
      @path = @options.path
      @element = dom with @make-element()
      @element.master = @master
      @element.channel = [@]
      @sub-channels = {}
      @resources = {}
      @setup()

   setup() =
      pass

   make-element() =
      div %

   intercepted-commands() =
      {}

   intercepts(message) =
      false

   dispatch(m and {command => match}) =
      .resource ->
         make-resources(m) each res ->
            @add-resource(res)

      .reprocess ->
         jq(m.selector)['each'](new Function{m.body})

      else ->
         throw new UnrecognizedCommandError(m, @)

   add-resource(res) =
      @resources.push(res)
      @element.append-child(res)
      @sub-channels each ch ->
         ch.add-resource(res.clone-node(true))

   register-channel(sub-channel) =
      @sub-channels.push(sub-channel)
      @resources each res ->
         sub-channel.add-resource(res.clone-node(true))

   add-channel(sub-channel) =
      @element.append-child(sub-channel.element)
      @register-channel(sub-channel)

   default-channel-options() =
      {type = .log}

   force-channel-options() =
      {=}

   open-channel(var options) =
      options = @default-channel-options(options) & options
      options = options & @force-channel-options(options)
      @master.construct(@, options.type, options)

   write(message) =
      @master.send(message & {path = @send-path or @path})
