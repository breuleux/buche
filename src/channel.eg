
require:
   node-uuid as uuid
   events -> EventEmitter
   /dom
   jquery as jq

globals:
   Bokeh

provide:
   channel-constructors


class SubChannels:

   constructor(@master, @config, @install) =
      @channels = {=}

   parse(m) =
      if m.path is '/':
         return {false, m}
      {_, sub-path, *rest} = m.path.split('/')
      sub-m = m & {path = '/' + rest.join('/')}
      return {sub-path, sub-m}

   get(name, message) =
      if @channels[name] as sch:
         sch
      else:
         type = message.type or @config.type
         expr-value @channels[name] =
            channel-constructors[type](@master, @config & message) with
               data -> @install(data & {= name})

   dispatch(m) =
      {sub-path, sub-m} = @parse(m)
      if sub-path:
         ch = @get(sub-path, sub-m)
         if sub-m.path !== '/' or sub-m.command !== .open:
            ch.dispatch(sub-m)
         true
      else:
         false


class TabsChannel < EventEmitter:

   constructor(@master, message, install) =
      @master.register('_', @)
      @anchor = message.anchor or 'top'
      anchor-tag = '.tabs-{@anchor}'
      @area = dom with
         div.tabs-area[^anchor-tag] %
            div.tabs-select.hide %
            div.tabs-panes %
      @area-select = @area.child-nodes[0]
      @area-panes = @area.child-nodes[1]
      @active = null
      @nchannels = 0
      install with {
         channel = (@)
         element = @area
         message = message
      }
      @sub-channels = SubChannels(@master, cfg, install) where
         cfg = {
            type = .tabs
            anchor = @anchor
         }
         install(data) =
            data.tab = @make-tab(data)
            data.holder = dom(div % data.element)
            @area-select.append-child(data.tab)
            @area-panes.append-child(data.holder)
            if not @active:
               @select(data)
            @nchannels += 1
            if @nchannels > 1 or data.name != '_':
               @area-select.class-list.remove(.hide)

   make-tab(data) =
      dom with
         div.tab %
            data.name
            onclick() =
               @select(data)

   select(data) =
      if @active:
         @active.tab.class-list.remove(.active)
         @active.holder.class-list.remove(.active)
      data.tab.class-list.add(.active)
      data.holder.class-list.add(.active)
      @active = data

   dispatch(m) =
      m2 =
         if m.path is '/':
            m & {path = '/_', type = m.type or .log}
         else:
            m
      @sub-channels.dispatch(m2)


class LogChannel < EventEmitter:

   constructor(@master, message, install) =
      @master.register('_', @)
      @area = dom(div.log-area %)
      @input = dom with
         input.log-input %
            onkeydown(e) =
               if e.key == 'Enter':
                  @emit(.command) with {
                     type = .input
                     contents = e.target.value
                  }
                  e.target.value = ""
      @all =
         if message.has-input:
            dom(div.log-area-stack % {@area, @input})
         else:
            @area
      install with {
         channel = (@)
         element = @all
         message = message
      }
      @sub-channels = SubChannels(@master, cfg, install) where
         cfg = {
            type = .log
         }
         install(data) =
            @area.append-child(data.element)

   dispatch(m) =
      success = @sub-channels.dispatch(m)
      if success:
         pass
      elif m.command is .log:
         element =
            match m.format:
               .pre ->
                  div.raw-line % m.contents
               .html ->
                  div[raw] % m.contents
               .markdown ->
                  require: marked
                  div[raw] % marked.inline-lexer(m.contents, {})
               .quaint ->
                  require: quaint
                  div[raw] % quaint.toHTML(m.contents)
               else ->
                  div % m.contents
         kind = '.{m.kind or "log"}'
         @area.append-child(dom(div[^kind] % element))
      elif m.command is .clear:
         while @area.first-child:
            @area.remove-child(@area.first-child)
      elif m.command is .reprocess:
         jq(m.selector)'each'(new Function{m.body})
      else:
         console.error('log channel does not know command {m.command}.')


class PlotChannel < EventEmitter:

   constructor(message, install) =
      @area = dom(div.plot-area %)
      install with {
         channel = (@)
         element = @area
         message = message
      }
      @source = new Bokeh.ColumnDataSource with {
         data = {x = {}, y = {}}
      }
      @xrange = new Bokeh.DataRange1d()
      @yrange = new Bokeh.DataRange1d()

      @plot = new Bokeh.Plot with {
         title = message.title or message.path
         x_range = @xrange
         y_range = @yrange
         plot_width = 400
         plot_height = 400
         background_fill_color = "#F2F2F7"
      }

      @xaxis = new Bokeh.LinearAxis with {axis_line_color = null}
      @yaxis = new Bokeh.LinearAxis with {axis_line_color = null}
      @plot.add_layout(@xaxis, "below");
      @plot.add_layout(@yaxis, "left");

      @line = new Bokeh.Line with {
         x = {field = "x"}
         y = {field = "y"}
         line_color = "#666699"
         line_width = 2
      }
      @plot.add_glyph(@line, @source)

      @doc = new Bokeh.Document()
      @doc.add_root(@plot)

      Bokeh.embed.add_document_standalone(@doc, @area)

   dispatch(m) =
      @source.data.x.push with m.x
      @source.data.y.push with m.y
      @source.change.emit()


channel-constructors = {
   error = LogChannel
   log = LogChannel
   plot = PlotChannel
   tabs = TabsChannel
}
