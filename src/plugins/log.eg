
require:
   /dom
   jquery as jq
   ..channel -> Channel
   ..components -> CustomShadow


jsclass LogChannel < Channel:

   make-element() =
      channel-log %
         onsubmit(e) =
            @write with {
               command = .input
               contents = e.target.value
            }
            e.target.value = ""
         input = @options.has-input

   dispatch(m and {command => match}) =
      .log ->
         element =
            match m.format:
               .pre ->
                  div.raw-line % m.contents
               .html ->
                  div[raw] % m.contents
               .markdown ->
                  require: marked
                  if m.inline:
                     div[raw] % marked.inline-lexer(m.contents, {})
                  else:
                     div[raw] % marked(m.contents, {})
               .quaint ->
                  require: quaint
                  div[raw] % quaint.toHTML(m.contents)
               else ->
                  div % m.contents
         if m.location is 'overlay':
            @element.overlay-area.innerHTML = ""
            @element.overlay-area.append-child(dom(element))
         else:
            @element.add(element, m.kind or .log)

      .clear ->
         @element.clear()

      else ->
         super.dispatch(m)


jsclass LogChannelElement < CustomShadow:

   setup() =
      @is-setup = true
      @scrolled-down = true
      @has-input = @get-attribute('input') == "true"

   template() =
      @scrolled-down = true
      @area = dom with
         div.log-area %
            onscroll(e) =
               a = @jqarea
               @scrolled-down =
                  a[0].scroll-height - a.scroll-top() == a.outer-height()
            @child-nodes each x -> x
      @overlay-area = dom with
         div.overlay-area %
      @jqarea = jq(@area)
      @input = dom with
         input.log-input %
            onkeydown(e) =
               if e.key == 'Enter':
                  @onsubmit(e)
      if @has-input:
         {@overlay-area, @area, @input}
      else:
         {@overlay-area, @area}

   css() = {
      ":host" = {
         display = .flex
         flex-direction = .column
         height = "100%"
         position = 'relative'
      }

      ".log-area" = {
         flex = 1
         overflow = .auto
         margin-left = '5px'
      }

      ".overlay-area" = {
         position = 'absolute'
         right = '0px'
         top = '0px'
         background = '#eee'
         padding = '5px'
         z-index = '100'
      }

      ".overlay-area:empty" = {
         display = 'none'
      }

      ".log-input" = {
         background = '#eee'
         padding = '5px'
         font-size = '14px'
         border = 'none'
         outline = 'none'
      }

      ".log-area > *" = {
         padding-left = '20px'
         margin-left = '5px'
      }

      ".log-area > * > *" = {
         display = "inline-block"
      }

      "style" = {
         display = "none !IMPORTANT"
      }

      ".log-area > .echo" = {
         border-left = '15px solid green'
         margin-left = '0px'
         padding-left = '15px'
         background-color = '#eee'
      }

      ".log-area > .log" = {
         padding-left = '20px'
      }

      ".log-area > .result" = {
         border-left = '5px solid blue'
      }

      ".log-area > .error" = {
         border-left = '5px solid red'
      }

      ".log-area > .warning" = {
         border-left = '5px solid orange'
      }

      ".raw-line" = {
         font-family = 'monospace'
         white-space = 'pre'
         padding = '0px'
         margin = '0px'
         line-height = '1'
      }
   }

   add(child, kind = .log) =
      wrapped-child = dom(div[^'.{kind}'] % child)
      if @area:
         @area.append-child(wrapped-child)
         if @scrolled-down:
            set-timeout(f, 0) where f() =
               @jqarea.scroll-top(@area.scroll-height)
      else:
         super.append-child(wrapped-child)

   append-child(child) =
      @add(child)


provide:
   {log = LogChannel} as channels
   {"channel-log" = LogChannelElement} as components
