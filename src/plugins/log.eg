
require:
   /dom
   jquery as jq
   buche-tools ->
      Channel, BucheError
   ..components ->
      BucheElement
   ..format ->
      format as fmt


jsclass LogChannel < Channel:

   make-element() =
      d = dom with
         channel-log %
            onsubmit(e) =
               @write with {
                  command = .input
                  contents = e.target.value
               }
               e.target.value = ""
            limit =
               match @options.limit:
                  undefined? -> 1000
                  === false -> -1
                  lim -> lim
      if @options.has-input:
         d.set-attribute('input', 'input')
      d

   dispatch_log(m) =
      content = m.content or m.contents
      if content is undefined:
         throw new BucheError(___, m, {fields = {.content}}) with
            '"log" command requires "content" field to be present.'
      element = fmt(@, m.format or .text, m.content or m.contents, m)
      if m.location is 'overlay':
         @element.overlay-area.innerHTML = ""
         @element.overlay-area.append-child(dom(element))
      else:
         @element.add(element, m.gutter or .log)

   dispatch_clear(m) =
      @element.clear()


jsclass LogChannelElement < BucheElement:

   requires-shadow() =
      true

   setup() =
      @is-setup = true
      @scrolled-down = true
      @has-input = @get-attribute('input') !== null
      Number! @limit = @get-attribute('limit') or Infinity
      @len = 0

   setup-end() =
      if @input:
         set-timeout((-> ___), 0) with
            @input.focus()

   eg-template() =
      @scrolled-down = true
      @area and @target-element = dom with
         div.log-area %
            onscroll(e) =
               a = @jqarea
               @scrolled-down =
                  a[0].scroll-height - a.scroll-top() == a.outer-height()
            @child-nodes each x -> x
      @overlay-area = dom with
         div.overlay-area %
      @jqarea = jq(@area)
      @input = dom with
         input.log-input %
            onkeydown(e) =
               if e.key == 'Enter':
                  @onsubmit(e)
      if @has-input:
         {@overlay-area, @area, @input}
      else:
         {@overlay-area, @area}

   css() = {
      ":host" = {
         display = .flex
         flex-direction = .column
         height = "100%"
         position = 'relative'
      }

      ".log-area" = {
         flex = 1
         overflow = .auto
         margin-left = '5px'
      }

      ".overlay-area" = {
         position = 'absolute'
         right = '0px'
         top = '0px'
         background = '#eee'
         padding = '5px'
         z-index = '100'
      }

      ".overlay-area:empty" = {
         display = 'none'
      }

      ".log-input" = {
         background = '#eee'
         padding = '5px'
         font-size = '14px'
         border = 'none'
         outline = 'none'
      }

      ".log-area > *" = {
         padding-left = '20px'
         margin-left = '5px'
      }

      ".log-area > * > *" = {
         display = "inline-block"
      }

      "style,script" = {
         display = "none !IMPORTANT"
      }

      ".log-area > .echo" = {
         border-left = '15px solid green'
         margin-left = '0px'
         padding-left = '15px'
         background-color = '#eee'
      }

      ".log-area > .log" = {
         padding-left = '20px'
      }

      ".log-area > .result" = {
         border-left = '5px solid blue'
      }

      ".log-area > .error" = {
         border-left = '5px solid red'
      }

      ".log-area > .warning" = {
         border-left = '5px solid orange'
      }

      ".raw-line" = {
         font-family = 'monospace'
         white-space = 'pre'
         padding = '0px'
         margin = '0px'
         line-height = '1'
      }

      ".buche-error" = {
         border = '1px solid #800'
         border-radius = '10px'
         display = .flex
         flex-direction = .column
         padding = '10px'
         margin-top = '5px'
         margin-bottom = '5px'
      }
      ".buche-error-reason::before" = {
         content = "'ERROR: '"
         font-weight = .bold
      }
      ".buche-error-path::before" = {
         content = "'In channel: '"
      }
      ".buche-error-path" = {
         color = "#aaa"
      }
      ".buche-error tabbed-view" = {
         margin-top = '10px'
      }
      ".buche-error table" = {
         border = '1px solid #888'
         border-collapse = 'collapse'
         margin = '2px'
      }
      ".buche-error tr:nth-child(odd)" = {
         background = '#eee'
      }
      ".buche-error tr:nth-child(even)" = {
         background = '#ddd'
      }
      ".buche-error tr.highlight" = {
         background = '#fdd'
      }

      ".install-request" = {
         background = "#eee"
         padding = "10px"
      }
      ".install-button" = {
         padding = "5px"
      }
      ".install-error" = {
         padding = "5px"
         color = "red"
         font-weight = "bold"
      }
      ".install-installing" = {
         padding = "5px"
      }
      ".install-done" = {
         padding = "5px"
         color = "green"
         font-weight = "bold"
      }
   }

   add(child, gutter = .log) =
      wrapped-child = dom(div[^'.{gutter}'] % child)
      @area.append-child(wrapped-child)
      @len += 1
      while @len > @limit:
         @area.remove-child(@area.child-nodes[0])
         @len -= 1
      if @scrolled-down:
         set-timeout(f, 0) where f() =
            @jqarea.scroll-top(@area.scroll-height)

   append-child(child) =
      if @target-element:
         @add(child)
      else:
         super.append-child(child)


provide:
   true as is-buche-plugin
   {log = LogChannel} as channels
   {"channel-log" = LogChannelElement} as components
