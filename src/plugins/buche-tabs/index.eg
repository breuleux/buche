
globals:
   document, Text, HTMLElement, custom-elements, CustomEvent
   MutationObserver


require:
   path
   /dom
   jquery as jq
   ...elements ->
      extract-config, BucheElement, make-nodes


provide:
   buche-install


class TabData:
   constructor(@buche-tabs, @tab, @pane, @initial-active, @order) =
      @pane._tabdata = (@)
      empty = @tab.class-list.contains(.empty) or not @pane.has-child-nodes()
      @buche-tabs.set-empty(@, empty)
      sel(e) =
         @buche-tabs.user-selected = true
         e.stop-propagation()
         additive =
            if @buche-tabs.config.sticky:
               not e.shift-key
            else:
               e.shift-key
         @buche-tabs.select(@, additive)
      @tab.query-selector-all('*') each child ->
         ;; Disable children's existing click events.
         child.onclick = sel
      @tab.onclick = sel
      bc = @buche-tabs.config
      if bc.autofocus or bc.hide-empty or bc['watch-activity']:
         @obs = new MutationObserver with muts ->
            @buche-tabs.log-activity(@, muts)
         @obs.observe(@pane) with {
            child-list = true
            subtree = true
         }

   activate() =
      @tab.class-list.add(.active)
      @tab.class-list.remove('has-activity')
      @pane.class-list.add(.active)
      @active = true
      @buche-tabs.active.push(@)
      @pane.dispatch-event(new CustomEvent('display', {detail = this}))

   deactivate() =
      @tab.class-list.remove(.active)
      @pane.class-list.remove(.active)
      @active = false
      @buche-tabs.active =
         @buche-tabs.active each a when a !== [@] -> a


jsclass TabEntry < HTMLElement:
   attribute-defaults() = {
      order = 0
      active = false
   }

   attribute-spec() = {
      order = parse-int
      active(match) =
         null? -> false
         "" -> true
   }

   constructor() =
      super()


jsclass TabLabel < HTMLElement:
   constructor() =
      super()


jsclass TabPane < HTMLElement:
   constructor() =
      super()


jsclass BucheTabs < BucheElement:

   attribute-defaults() = {
      ;; Whether the tabs are at the top, bottom, left or right
      layout = .top
      ;; If true, clicking and shift-clicking are swapped
      sticky = false
      ;; Whether to focus the first tab that shows activity
      autofocus = false
      ;; Whether to hide empty tabs
      "hide-empty" = false
      ;; Whether to watch for activity in tabs
      "watch-activity" = false
   }

   attribute-spec() = {
      sticky(match) =
         null? -> false
         "" -> true
      autofocus(match) =
         null? -> false
         "" -> true
      "hide-empty"(match) =
         null? -> false
         "" -> true
      "watch-activity"(match) =
         null? -> false
         "" -> true
   }

   constructor() =
      super()

   _add(ch) =
      {lbl, pane} =
         match consume(ch.children):
            {} ->
               l = ch.get-attribute(.label)
               {
                  dom with (tab-label % l)
                  dom with (tab-pane %)
               }
            {TabLabel? lbl} ->
               {lbl, dom with (tab-pane %)}
            {TabLabel? lbl, TabPane? pane} ->
               {lbl, pane}
            else ->
               throw Error with
                  '<tab-entry> should contain <tab-label> followed by <tab-pane>'

      if not pane.get-attribute(.address):
         chaddr = ch.get-attribute(.address)
         if chaddr:
            pane.set-attribute(.address, chaddr)

      cfg = extract-config(ch)
      data = TabData(@, lbl, pane, cfg.active, cfg.order)
      order = data.order

      idx =
         if not order:
            @_data.length
         else:
            var idx = 0
            while @_data[idx] and @_data[idx].order <= order:
               idx += 1
            idx

      if idx == @_data.length:
         @_tabs.append-child(data.tab)
         @_panes.append-child(data.pane)
      else:
         prev = @_data[idx]
         @_tabs.insert-before(data.tab, prev.tab)
         @_panes.insert-before(data.pane, prev.pane)
      @_data.splice(idx, 0, data)

      if data.initial-active:
         data.activate()

   setup(config, children) =
      @active = {}
      @_nonempty = new Set()
      @_data = {}
      @_tabs = dom with div.labels %
      @_panes = dom with div.panes %
      @_append-child(@_tabs)
      @_append-child(@_panes)
      super.setup(config, children)

   push-child(match ch) =
      TabEntry? ->
         @_add(ch)
      Text? t when not t.text-content.trim() ->
         pass
      else ->
         throw Error('<buche-tabs> only accepts <tab-entry>, not {ch}')

   select(spec, add-to-active = false) =
      was-active = spec.active
      nactive = @active.length
      if nactive > 0 and not add-to-active:
         {* @active} each a ->
            a.deactivate()
      if was-active and nactive == 1:
         spec.deactivate()
      else:
         spec.activate()

   set-empty(spec, empty) =
      if empty:
         spec.tab.class-list.add(.empty)
         @_nonempty.delete(spec)
      else:
         spec.tab.class-list.remove(.empty)
         @_nonempty.add(spec)

      if @_nonempty.size == 1:
         @class-list.add('one-nonempty')
      else:
         @class-list.remove('one-nonempty')

   log-activity(spec, muts) =
      @set-empty(spec, false)

      if @config.autofocus:
         @select(spec)
         @config.autofocus = false

      if @config['watch-activity']:
         if not spec.active:
            spec.tab.class-list.add('has-activity')
      else:
         spec.obs.disconnect()

   command_new(_, options) =
      options.content or= ""
      pane = dom with
         tab-pane %
            make-nodes(options)
      if options.pane-address as addr:
         pane.set-attribute('address', addr)
      new-tab = dom with
         tab-entry %
            tab-label %
               options.label or 'tab{@_tabs.length}'
            pane
      if options.active:
         new-tab.set-attribute(.active, "")
      @_add(new-tab)


jsclass BubbleTabs < BucheTabs:
   []


jsclass BoxTabs < BucheTabs:
   []


buche-install() =
   custom-elements.define('tab-entry', TabEntry)
   custom-elements.define('tab-label', TabLabel)
   custom-elements.define('tab-pane', TabPane)
   custom-elements.define('buche-tabs', BucheTabs)
   custom-elements.define('bubble-tabs', BubbleTabs)
   custom-elements.define('box-tabs', BoxTabs)
   {'style.css', 'bubble-style.css', 'box-style.css'} each sheet ->
      document.head.append-child(dom(___)) with
         link %
            type = "text/css"
            rel = .stylesheet
            href = path.join(__dirname, sheet)
