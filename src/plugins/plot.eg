
require:
   /dom
   bokehjs as Bokeh
   buche-tools -> Channel


jsclass PlotChannel < Channel:
   setup() =
      @sources = {=}
      @color-rotation = {'blue', 'red', 'green', 'purple'}

      tools = "pan,crosshair,wheel_zoom,box_zoom,reset,resize,save"

      @plot = Bokeh.Plotting.figure with {
         title = @options.title or null
         tools = tools
      }

      @plot._legend.click_policy = @options.legend-click or 'hide'
      @plot._legend.location = @options.legend-location or 'top_right'

   show-plot() =
      if not @shown:
         @shown = true
         Bokeh.Plotting.show(@plot, @element)

   new-color() =
      color = @color-rotation.shift()
      @color-rotation.push(color)
      color

   make-element() =
      dom with
         div %
            link %
               rel = .stylesheet
               href = '../html/bokeh-0.12.6.min.css'
               type = 'text/css'
            link %
               rel = .stylesheet
               href = '../html/bokeh-widgets-0.12.6.min.css'
               type = 'text/css'
            div.plot-area %

   dispatch(m and {command => match}) =
      .point ->
         if @sources[m.sub-path or m.name or ""] as {main => src}:
            @add-point(src, m.x, m.y)
         else:
            @add-line(m & {name = m.sub-path})
      else ->
         super.dispatch(m)

   add-channel(sub-channel) =
      pass

   open-channel(options) =
      @add-line({name = options.sub-path} & options)
      @master.construct(@, .redirect, options & {redirect-path = @path})

   add-point(src, x, y) =
      src.data.x.push with x
      src.data.y.push with y
      @show-plot()
      src.change.emit()

      ;; if max.data.y < m.y:
      ;;    max.data.x[0] = m.x
      ;;    max.data.y[0] = m.y
      ;;    max.change.emit()

   add-line(opt) =
      source = new Bokeh.ColumnDataSource with {
         data = {
            x = {}
            y = {}
         }
      }
      ;; max-source = new Bokeh.ColumnDataSource with {
      ;;    data = {
      ;;       x = if{opt.x, {opt.x}, {}}
      ;;       y = if{opt.x, {opt.y}, {}}
      ;;    }
      ;; }
      color = opt.line-color or @new-color()
      @plot.line({field = "x"}, {field = "y"}) with {
         source = source
         line_color = color
         line_width = opt.line-width or 2
         legend = opt.legend or opt.name or "--"
      }
      ;; @plot.circle({field = "x"}, {field = "y"}) with {
      ;;    source = max-source
      ;;    size = 10
      ;;    color = color
      ;;    legend = opt.legend or opt.path
      ;; }
      ;; @sources[opt.path] = {main = source, max = max-source}
      @sources[opt.name] = {main = source}
      if opt.x:
         @add-point(source, opt.x, opt.y)


provide:
   {plot = PlotChannel} as channels
   {=} as components

