
require:
   /dom
   jquery as jq
   buche-tools -> Channel
   ..components ->
      BucheElement
   ..format ->
      format as fmt


jsclass SlidesChannel < Channel:

   make-element() =
      dom with
         channel-slides %
            onsubmit(e) =
               @write with {
                  command = .input
                  contents = e.target.value
               }
               e.target.value = ""
            input = @options.has-input

   dispatch_log(m) =
      element = fmt(@, m.format or .text, m.content or m.contents, m)
      if m.location is 'overlay':
         @element.overlay-area.innerHTML = ""
         @element.overlay-area.append-child(dom(element))
      else:
         @element.add(element, m.kind or .log)

   dispatch_clear(m) =
      @element.clear()


jsclass SlidesChannelElement < BucheElement:

   requires-shadow() =
      true

   setup() =
      @is-setup = true
      @has-input = @get-attribute('input') == "true"

   eg-template() =
      @active = -1
      @counter = dom with
         span %
            '? / ?'
      @controls = dom with
         div.slides-controls %
            button %
               "<<"
               onclick(e) =
                  @select(0)
            button %
               "<"
               onclick(e) =
                  nch = @area.child-nodes.length
                  i = (@active + nch - 1) mod nch
                  @select(i)
            @counter
            button %
               ">"
               onclick(e) =
                  nch = @area.child-nodes.length
                  i = (@active + 1) mod nch
                  @select(i)
            button %
               ">>"
               onclick(e) =
                  @select(@area.child-nodes.length - 1)
      @area and @target-element = dom with
         div.slides-area %
            @child-nodes each x -> x
      @overlay-area = dom with
         div.overlay-area %
      @jqarea = jq(@area)
      @input = dom with
         input.log-input %
            onkeydown(e) =
               if e.key == 'Enter':
                  @onsubmit(e)
      if @has-input:
         {@overlay-area, @controls, @area, @input}
      else:
         {@overlay-area, @controls, @area}

   css() = {
      ":host" = {
         display = .flex
         flex-direction = .column
         height = "100%"
         position = 'relative'
      }

      ".slides-controls > *" = {
         margin-left = '5px'
         margin-right = '5px'
      }

      ".slides-area" = {
         flex = 1
         overflow = .auto
         margin-left = '5px'
      }

      ".slides-area > *" = {
         display = 'none'
      }

      ".slides-area > .active" = {
         display = 'block'
      }

      ".overlay-area" = {
         position = 'absolute'
         right = '0px'
         top = '0px'
         background = '#eee'
         padding = '5px'
         z-index = '100'
      }

      ".overlay-area:empty" = {
         display = 'none'
      }

      ".log-input" = {
         background = '#eee'
         padding = '5px'
         font-size = '14px'
         border = 'none'
         outline = 'none'
      }

      "style,script" = {
         display = "none !IMPORTANT"
      }

      ".raw-line" = {
         font-family = 'monospace'
         white-space = 'pre'
         padding = '0px'
         margin = '0px'
         line-height = '1'
      }
   }

   select(i) =
      if @active >= 0:
         @area.child-nodes[@active].class-list.remove('active')
      @area.child-nodes[i].class-list.add('active')
      @active = i
      @update-counter()

   update-counter() =
      @counter.innerHTML = '{@active + 1} / {@area.child-nodes.length}'

   add(child, kind = .log) =
      wrapped-child = dom(div[^'.{kind}'] % child)
      @area.append-child(wrapped-child)
      nchildren = @area.child-nodes.length
      if @active == nchildren - 2:
         @select(nchildren - 1)
      else:
         @update-counter()

   append-child(child) =
      if @target-element:
         @add(child)
      else:
         super.append-child(child)


provide:
   {slides = SlidesChannel} as channels
   {"channel-slides" = SlidesChannelElement} as components

