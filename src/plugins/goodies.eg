
require:
   /dom
   "highlight.js" as hljs
   fs
   ..components ->
      TabData, BucheElement
   ..format ->
      format as fmt


provide:
   TabbedView
   TabDataX


globals:
   Text


jsclass IBox < BucheElement:
   setup() =
      ch = @get-channel()
      obj-id = @get-attribute('obj-id')
      @onclick(e) =
         e.stop-propagation()
         if ch:
            ch.write with {
               command = .click
               button = match e.button:
                  0 -> .left
                  1 -> .middle
                  2 -> .right
               shift = e.shift-key
               ctrl = e.ctrl-key
               alt = e.alt-key
               meta = e.meta-key
               = obj-id
            }

      path = '{ch.path}/#{obj-id}'
      ch.master.channels[path] = [@]

   dispatch(m and {command => match}) =
      .replace ->
         node = fmt(@, m.format or .html, m.content or m.contents, m)
         @innerHTML = node.innerHTML
      .highlight ->
         if m.color is undefined:
            m.color = .yellow
         color = match m.color:
            undefined? -> .yellow
            null? -> .transparent
            c -> c
         to-hl = if{m.children, @child-nodes, {@}}
         to-hl each x ->
               x.style.backgroundColor = color
      .style ->
         style = match m.style:
            null? ->
               ""
            String? s ->
               s
            else ->
               throw Error('TODO: support style dictionary')
         @style.css-text = style
      else ->
         throw Error('Unknown command: {m.command}')

   css() = {
      "i-box" = {
         display = 'inline-block'
      }
   }


class TabDataX:
   constructor(@tabbed-view, tab, pane, @initial-active, @order) =
      @tab =
         if tab.tag-name !== 'TAB':
            dom with tab % tab
         else:
            tab
      @pane =
         if pane.tag-name !== 'PANE':
            dom with pane % pane
         else:
            pane
      sel(e) =
         e.stop-propagation()
         additive =
            if @tabbed-view.sticky:
               not e.shift-key
            else:
               e.shift-key
         @tabbed-view.select(@, additive)
      @tab.query-selector-all('*') each child ->
         ;; Disable children's existing click events.
         child.onclick = sel
      @tab.onclick = sel

   activate() =
      @tab.class-list.add(.active)
      @pane.class-list.add(.active)
      @active = true
      @tabbed-view.active.push(@)

   deactivate() =
      @tab.class-list.remove(.active)
      @pane.class-list.remove(.active)
      @active = false
      @tabbed-view.active =
         @tabbed-view.active each a when a !== [@] -> a


jsclass TabbedView < BucheElement:
   setup() =
      @anchor = @get-attribute('anchor') or 'top'
      @sticky = @get-attribute('sticky') !== null
      @active = {}
      @nchannels = 0
      @specs = {}

   select(spec, add-to-active = false) =
      if @active.length > 0 and not add-to-active:
         {* @active} each a ->
            a.deactivate()
      if add-to-active and spec.active:
         spec.deactivate()
      else:
         spec.activate()

   install(spec) =
      var idx = 0
      while @specs[idx] and @specs[idx].order <= spec.order:
         idx += 1

      if idx == @specs.length:
         @tabs.append-child(spec.tab)
         @panes.append-child(spec.pane)
      else:
         prev = @specs[idx]
         @tabs.insert-before(spec.tab, prev.tab)
         @panes.insert-before(spec.pane, prev.pane)
      @specs.splice(idx, 0, spec)

      if spec.initial-active:
         spec.activate()

   acquire(match node) =
      String? tc and match is tc ->
         R"^[ \n]*$"? ->
            pass
         else ->
            @messages.append-child(dom with tc)
      {tag-name => match} ->
         .VIEW ->
            {tab, pane} = node.child-nodes each x when not Text? x -> x
            active = node.get-attribute('active') !== null
            Number! order = node.get-attribute('order') or 1000
            data = TabDataX(@, tab, pane, active, order)
            @install(data)
         .STYLE or .LINK ->
            @add-resource(node)
         else ->
            @messages.append-child(node)

   eg-template(children) =

      @messages = dom with
         div.tabbed-view-globals %
      @tabs = dom with
         div.tabbed-view-tabs %
      @panes = dom with
         div.tabbed-view-panes %

      children each child -> @acquire(child)

      if @active.length == 0:
         @specs[0]??.activate()


      if @anchor is .left or @anchor is .top:
         div.tabbed-view-holder %
            @tabs
            @messages
            @panes
      else:
         div.tabbed-view-holder %
            @panes
            @messages
            @tabs

   css() =
      tab-loc =
         if @anchor is 'left' or @anchor is 'right': {
            ".tabbed-view-holder " = {
               flex-direction = .row
               width = "100px"
            }
            ".tabbed-view-tabs " = {
               flex-direction = "column"
            }
         }
         else: {
            ".tabbed-view-holder " = {
               flex-direction = .column
            }
            ".tabbed-view-tabs " = {
               flex-direction = "row"
            }
         }
      @basic-css() & tab-loc

   basic-css() = {

      "tabbed-view" = {
         display = "inline-block"
      }

      ".tabbed-view-holder" = {
         display = "flex"
      }

      ".tabbed-view-tabs" = {
         display = "flex"
         flex-wrap = "wrap"
         overflow = "auto"
         border = "1px solid black"
      }

      ".tabbed-view-holder tab > *" = {
         display = "inline-block"
      }

      ".tabbed-view-holder tab" = {
         display = "inline-block"
         cursor = "pointer"
         margin = "2px 3px 2px 3px"
         padding = "0px 2px 0px 2px"
         border = "1px solid black"
         user-select = "none"
      }

      ".tabbed-view-holder tab.active" = {
         background = "white"
         border = "1px solid white"
      }

      ".tabs-global" = {
         border = "1px solid black"
         padding = "2px"
         border-top = "none"
         border-bottom = "none"
      }

      ".tabbed-view-panes" = {
         display = "flex"
         flex-direction =
            if @anchor in {.left, .right}:
               then: .column
               else: .row
         flex = "1"
         overflow = "auto"
      }

      ".tabbed-view-panes > *" = {
         display = "none"
         padding = "2px"
         flex = "1"
         border = "1px solid black"
         ;; border-top = "none"
         height = "100%"
         overflow = "auto"
      }

      ".tabbed-view-panes > .active" = {
         display = "block"
      }

      ".tabbed-view-holder > .tabbed-view-globals:empty" = {
         display = 'none'
      }
   }


jsclass CodeSnippet < BucheElement:
   setup() =
      @filename = @get-attribute('src')
      try:
         @contents = fs.read-file-sync(@filename, .utf8)
      catch e:
         @contents = match @child-nodes[0]:
            undefined? -> ""
            Text? t -> t.text-content
            node -> node.inner-text
      @lang = @get-attribute('language') or 'auto'
      Number! @column = @get-attribute('column') or -1
      @column -= 1
      Number! @lineno = @get-attribute('line') or 1
      @lineno -= 1
      Number! @context = @get-attribute('context') or 0
      lines = @contents.split(R"\n") each line -> '{line}\n'
      lo = Math.max(@lineno - @context, 0)
      hi = Math.min(@lineno + @context, lines.length - 1)
      lang-class = '.{@lang}'

      @excerpt = dom with
         div.hljs[^lang-class] %
            lines[lo ... @lineno]
            span.hljs-line-focus %
               if @column < 0:
                  then:
                     lines[@lineno]
                  else:
                     l = lines[@lineno]
                     {
                        l[0 ... @column]
                        span.hljs-column-focus % l[@column]
                        l[(@column + 1) ...]
                     }
            lines[(@lineno + 1) .. hi]
      @hl-excerpt = hljs.highlight-block(@excerpt)
      @hl-excerpt = @excerpt

      ;; @excerpt = lines[lo..hi].join('\n')
      ;; @hl-excerpt = hljs.highlight(@lang, @excerpt).value

      @line-numbers = (lo..hi each i -> ___) with
         if i == @lineno:
            then: div.hljs-lineno-focus % '{i + 1}'
            else: div % '{i + 1}'

   eg-template(children) = {
      link %
         rel = 'stylesheet'
         type = 'text/css'
         href = '../node_modules/highlight.js/styles/github.css'
      div %
         code.filename %
            @filename
         div.hljs-box %
            .hljs-linenos %
               @line-numbers
            @hl-excerpt
            ;; .hljs[raw] %
            ;;    @hl-excerpt
   }

   css() = {
      "code-snippet" = {
         display = .block
      }

      "code.filename" = {
         display = .block
         background = '#e8e8e8'
      }

      ".hljs-lineno-focus" = {
         background = '#ddd'
         color = .purple
      }
      ".hljs-line-focus" = {
         background = '#ddd'
         display = 'block'
      }
      ".hljs-column-focus" = {
         background = '#aaa'
         ;; outline = '2px solid #777'
         ;; background = 'linear-gradient(to right, #aaa, #ddd)'
      }
      ".hljs-box" = {
         display = "flex"
         flex-direction = "row"
      }
      ".hljs-linenos, .hljs" = {
         font-size = "16px"
         line-height = "1.2"
         font-family = .monospace
         white-space = .pre
      }
      ".hljs-linenos" = {
         font-weight = .bold
         padding-right = "4px"
         border-right = "2px solid purple"
      }
      ".hljs" = {
         flex = "1"
         padding = "0px !IMPORTANT"
         padding-left = "4px !IMPORTANT"
      }
   }


provide:
   true as is-buche-plugin
   {=} as channels
   {"i-box" = IBox
    "tabbed-view" = TabbedView
    "code-snippet" = CodeSnippet} as components
