
require:
   "./format" -> format
   /dom


provide:
   extract-config
   BucheElement
   custom-elements
   make-nodes
   element-to-command


globals:
   HTMLElement, Text, custom-elements, CustomElementRegistry, Event


make-nodes(match message, fmt) =
   undefined? or null? ->
      {}
   String? ->
      Array! format(fmt, message)
   Array? ->
      message.map(make-nodes).reduce(++)
   {=> tag} ->
      new-children = make-nodes(message.children, message.format or .html)
      enode = ENode(tag, props, new-children) where props =
         object with items(message) each {match k, v} ->
            .tag or .children ->
               continue
            else ->
               {k, v}
      {dom(enode)}
   {=> children} ->
      make-nodes(children, message.format or .html)
   else ->
      throw Error('Cannot make a node out of this.')


method HTMLElement.prototype.dispatch(cmd, data) =
   m = @['command_{cmd}']
   if m:
      m.call(@, cmd, data)
   else:
      throw new Error('Unrecognized command: {cmd}')


method HTMLElement.prototype.command_log(_, data) =
   make-nodes(data) each node ->
      @append-child(node)


method HTMLElement.prototype.command_clear(_, data) =
   @innerHTML = ""


method HTMLElement.prototype.buche-dispatcher() =
   var root = [@]
   while not root._buche-dispatcher:
      root = root.parent-node
   root._buche-dispatcher


method HTMLElement.prototype.buche-send(obj, arg) =
   message = match obj:
      Event? ->
         {
            path = @buche-path or null
            event-type = obj.type
            modifiers = {
               ctrl = obj.ctrl-key
               shift = obj.shift-key
               alt = obj.alt-key
               meta = obj.meta-key
            }
            which = obj.which
         }
      Number? or String? ->
         {
            path = @buche-path or null
            argument = obj
         }
      else ->
         obj

   if typeof(arg) is .object:
      Object.assign(message, arg)
   else:
      message.argument = arg

   @buche-dispatcher().source.send(message)


_process-child-as-command(match ch, state) =
   when state.data !== null ->
      state.state = .invalid
   Text? t ->
      ;; TODO: error handling
      state.data = JSON.parse(t.data)
      state.state = .ok
   else ->
      state.state = .invalid


element-to-command(node, command = null) =
   data = {
      state = .invalid
      command = command
         \ or node.get-attribute(.command)
         \ or node.get-attribute(.cmd)
         \ or .log
      data = null
   }

   node.child-nodes each ch ->
      _process-child-as-command(ch, data)

   node.buche-data = data
   data


extract-config(@) =
   spec = @attribute-spec()
   config = @attribute-defaults()
   @attributes each attr ->
      name = attr.name
      v =
         if spec[name]:
            spec[name](attr.value)
         else:
            attr.value
      config[name] = v
   items(config) each {name, v} ->
      @set-attribute(name, v)
   config


jsclass BucheElement < HTMLElement:

   constructor() =
      super()
      @_locked = false

   attribute-defaults() =
      {=}

   attribute-spec() =
      {=}

   _lock() =
      if not @_locked:
         @_locked = true
         config = extract-config(@)
         children = consume(@child-nodes)
         @innerHTML = ""
         @setup(config, children)

   setup(config, children) =
      @config = config
      children each ch ->
         @push-child(ch)

   connected-callback() =
      @_lock()

   append-child(ch) =
      if @_locked:
         @push-child(ch)
      else:
         super.append-child(ch)

   _append-child(ch) =
      super.append-child(ch)


jsclass BucheCommand < HTMLElement:
   constructor() =
      super()
      element-to-command(@)
      @innerHTML = "&lt;buche-command&gt; should not be in the DOM tree."

   append-child(ch) =
      _process-child-as-command(ch, @buche-data)


jsclass PlaceholderElement < HTMLElement:
   constructor() =
      super()

   connected-callback() =
      tag = @get-attribute(.tag)
      @set-attribute(.title) with
         'Undefined tag: <{tag}>. You may need to install a plugin.'
      @append-child(dom('<{tag}>'))


_standard-hyphenated = {
   "annotation-xml" = true
   "color-profile" = true
   "font-face" = true
   "font-face-src" = true
   "font-face-uri" = true
   "font-face-format" = true
   "font-face-name" = true
   "missing-glyph" = true
}


CustomElementRegistry.prototype.is-valid-name(name) =
   ;; This is not exhaustive. Actual spec at:
   ;; https://www.w3.org/TR/custom-elements/#valid-custom-element-name
   R"[a-z_]+-[a-z_]+"? name and not _standard-hyphenated[name]


elements-map = {
   "placeholder-element" = PlaceholderElement
   "buche-command" = BucheCommand
}


items(elements-map) each {tag, cls} ->
   custom-elements.define(tag, cls)
