
require:
   events -> EventEmitter
   .plugins/log
   .plugins/tabs
   .plugins/redirect
   .plugins/plot
   .plugins/slides
   .plugins/template
   .plugins/goodies
   .registry ->
      load-plugin, channel-constructors
   .util -> BucheException

provide:
   RootDispatcher

globals:
   document


load-plugin(log)
load-plugin(tabs)
load-plugin(redirect)
load-plugin(plot)
load-plugin(slides)
load-plugin(template)
load-plugin(goodies)


gen hierarchy(path) =
   parts = path.split('/')
   last = parts.pop()
   2..parts.length each i ->
      yield parts.join('/')
      parts.pop()
   yield "/"


split-end(path) =
   parts = path.split('/')
   last = parts.pop()
   {parts.join('/') or '/', last or null}


class RootDispatcher < EventEmitter:

   constructor(@source, @target) =
      @set-max-listeners(Infinity)
      @channels = {=}
      @intercepts = {=}

   find-channel(path) =
      ch = @channels[path]
      if not ch:
         {p, c} = split-end(path)
         @open(p, c, {path = path})
      else:
         ch

   open(parent-path, name, base-options) =
      options = base-options & {
         parent-path = parent-path
         name = name
      }
      if parent-path == '/' and not name:
         @construct(null, .tabs, options)
      else:
         parent = @find-channel(parent-path)
         parent.open-channel(options)

   construct(parent-channel, type, options) =
      cls = channel-constructors[type]
      ch = new cls(@, options)
      if parent-channel is null:
         @target.append-child(ch.element)
      else:
         parent-channel.add-channel(ch, options)
      expr-value @channels[options.path] = ch

   dispatch(message) =
      {'path', 'command'} each field ->
         if not message[field]:
            err = new BucheException(___, {field}, message, {path = '/'}) with
               'Missing field in message: "{field}"'
            @dispatch(err.create-message('/buche-errors'))
            return

      try:
         path = message.path
         if @intercepts[message.command]:
            hierarchy(path) each p ->
               if @channels[p] as ch:
                  if ch.intercepts(message):
                     return ch.dispatch(message)
         if message.command is .open:
            {p, c} = split-end(path)
            @open(p, c, message)
         else:
            @find-channel(path).dispatch(message)
      catch BucheException? err:
         @dispatch(err.create-message('/buche-errors'))
      catch Error? e:
         err = new BucheException(e.message, {}, message, null, e)
         @dispatch(err.create-message('/buche-errors'))

   run() =
      @source.read(m -> @dispatch(m))

   send(message) =
      @source.send(message)
