
require:
   events -> EventEmitter
   .elements ->
      custom-elements, make-nodes, element-to-command
   .util ->
      format-buche-exception
   .plugins/buche-tabs ->
      TabEntry
   /dom


provide:
   RootDispatcher


globals:
   document, MutationObserver, Element, Text


top-template =
   buche-tabs %
      id = "buche-real-root"
      address = "/buche"
      "hide-empty" = true
      autofocus = true
      layout = .top


default-root-template =
   tab-entry %
      tab-label.empty %
         id = "buche-root-label"
         "/"
      tab-pane %
         id = "buche-root"
         address = "/"


required-channels = {
   "/stdout" =
      tab-entry %
         tab-label.empty %
            id = "buche-stdout-label"
            "/stdout"
         tab-pane %
            id = "buche-stdout-pane"
            buche-log %
               address = "/stdout"
   "/stderr" =
      tab-entry %
         tab-label.empty %
            id = "buche-stderr-label"
            "/stderr"
         tab-pane %
            id = "buche-stderr-pane"
            buche-log %
               address = "/stderr"
   "/buche/errors" =
      tab-entry %
         tab-label.empty %
            id = "buche-errors-label"
            "üêû"
         tab-pane %
            id = "buche-errors-pane"
            buche-log %
               address = "/buche/errors"
}


class InteractiveDocument < EventEmitter:

   constructor(@container, @dispatcher) =
      @channels = {=}
      @container._buche-dispatcher = @dispatcher
      @initialized = false

   initialize(content) =
      @container.innerHTML = ""
      @container.append-child(content)
      @handle-additions(@container.child-nodes, @container)
      @obs = new MutationObserver with (muts each mut) ->
         @dispatcher.wrap(___, null) with ->
            @handle-additions(mut.added-nodes, mut.target)
            @remove-channels-from(mut.removed-nodes, mut.target)
      @obs.observe(@container) with {
         child-list = true
         subtree = true
      }
      @initialized = true

   create-channel(path, element) =
      match @channels[path]:
         undefined? ->
            element.buche-path = path
            @channels[path] = element
            @emit('add-channel', path, element)
            @emit(path, element)
         !== element ->
            throw Error('Channel {path} already exists.')
         else ->
            pass

   async schedule-placeholder-removal(tag-name, ph, ch) =
      await custom-elements.when-defined(tag-name)
      ph.parent-node.replace-child(ch, ph)

   handle-additions(nodes, parent) =
      @insert-placeholders(nodes, parent)
      @add-channels-from(nodes, parent)

   insert-placeholders(match node, parent) =
      ;; Any undefined custom element is replaced by an informative
      ;; placeholder until the required plugin is installed.
      ;; Also, <command-*> tags are removed and their JSON content
      ;; is dispatched to the parent as a command.
      do:
         if node.__buche-processed:
            return
      Element? and match is node.tag-name.to-lower-case() ->
         do:
            node.__buche-processed = true
         R"^command-([a-z]+)$"! {_, command-name} ->
            data = element-to-command(node, command-name)
            parent.dispatch(parent.buche-path, data.command, data.data)
            parent.remove-child(node)
         do:
            @insert-placeholders(consume(node.child-nodes), node)
         name when custom-elements.is-valid-name(name)
                   \ and custom-elements.get(name) is undefined ->
            ph = dom with
               placeholder-element %
                  tag = name
            parent.replace-child(ph, node)
            @schedule-placeholder-removal(name, ph, node)
         else ->
            pass
      Text? ->
         pass
      else ->
         node each x -> @insert-placeholders(x, parent)

   add-channels-from(match node, var parent) =
      Element? ->
         match node.get-attribute('address') as addr:
            undefined? or null? ->
               pass
            R"^/"? ->
               @create-channel(addr, node)
            else ->
               while not parent.buche-path:
                  parent = parent.parent-node
               prefix = parent.buche-path.replace(R"/+$", "")
               full-addr = '{prefix}/{addr}'
               @create-channel(full-addr, node)
         @add-channels-from(node.child-nodes, node)
      Text? ->
         pass
      else ->
         node each x -> @add-channels-from(x, parent)

   remove-channels-from(match node, parent) =
      Element? ->
         ;; TODO
         pass
         ;; throw Error('Cannot remove nodes at the moment.')
      Text? ->
         pass
      else ->
         node each x -> @remove-channels-from(x, parent)


class RootDispatcher < EventEmitter:

   constructor(@source, @container, @plugins) =
      @doc = InteractiveDocument(@container, @)
      @waitlist = {=}

   _no-parent(m) =
      if m.parent !== undefined:
         throw Error('{m.command} command should not set parent field')

   _install-template(Array! template) =
      if @doc.initialized:
         throw Error('template command should come before any other')
      top = dom with top-template

      main-tab-children = {}
      var main-tab-label = 'main'

      template each
         TabEntry? node ->
            top.append-child(node)
         Element? node ->
            match node.get-attribute(.address):
               null? -> pass
               addr ->
                  main-tab-label = addr
            main-tab-children.push(node)
         Text? node ->
            if node.data.trim():
               main-tab-children.push(node)

      if main-tab-children.length > 0:
         top.append-child(dom(___)) with
            tab-entry %
               tab-label %
                  id = "buche-root-label"
                  main-tab-label
               tab-pane %
                  main-tab-children

      ;; Query all the addresses defined by the template
      addresses = new Set with
         top.query-selector-all('[address]') each node ->
            node.get-attribute('address')
      ;; Some channels *must* be defined. If they are missing from the
      ;; template, we add them as tabs to the top.
      items(required-channels) each {name, tpl} ->
         if not addresses.has(name):
            top.append-child(dom(tpl))
      @doc.initialize(top)

   wait-for(channel-name, message) =
      match @waitlist[channel-name]:
         undefined? ->
            w = {}
            @waitlist[channel-name] = w
            w.push(message)
            @doc.once(channel-name) with element ->
               delete @waitlist[channel-name]
               w each m ->
                  @dispatch(m)
         w ->
            w.push(message)

   _dispatch(message and match is message.command) =
      do:
         clone! m = message
         channel-name = m.parent
         delete m.parent
         delete m.command
      .template ->
         @_no-parent(message)
         @_install-template(make-nodes(message))
      .redirect ->
         @_no-parent(message)
         if @doc.channels[message.from] is undefined:
            @wait-for(message.from, message)
         elif @doc.channels[message.to] is undefined:
            @wait-for(message.to, message)
         else:
            @doc.channels[message.from] = @doc.channels[message.to]
      .resource ->
         @_no-parent(message)
         make-nodes(message) each node ->
            document.head.append-child(node)
      .plugin ->
         @_no-parent(message)
         @plugins.load(message.name)

      when channel-name is undefined ->
         throw Error("'parent' field was not set in command")

      do:
         if not @doc.initialized:
            @_install-template(dom(default-root-template))
         channel = channel-name and @doc.channels[channel-name]
      when channel is undefined ->
         ;; We stash the message until its parent channel has been created.
         @wait-for(channel-name, message)

      cmd ->
         channel.dispatch(channel-name, cmd or 'log', m)

   wrap(f, message) =
      try:
         f()
      catch err:
         m = message or err.json-message
         @_dispatch(format-buche-exception(m, err))

   dispatch(message) =
      @wrap(-> @_dispatch(message), message)

   run() =
      @source.read(m -> @dispatch(m))
