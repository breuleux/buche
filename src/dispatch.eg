
require:
   events -> EventEmitter
   buche-tools -> BucheError
   .registry ->
      load-plugin, channel-constructors
   .util ->
      buche-exception-message

provide:
   RootDispatcher

globals:
   document


;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Load default plugins ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;


{.nil, .redirect, .goodies
 .log, .tabs, .slides, .template} each default-plugin ->
   load-plugin{default-plugin}


buche-error-channel = '/!buche-errors'


gen hierarchy(path) =
   parts = path.split('/')
   last = parts.pop()
   2..parts.length each i ->
      yield parts.join('/')
      parts.pop()
   yield "/"


split-end(path) =
   parts = path.split('/')
   last = parts.pop()
   {parts.join('/') or '/', last or null}


class RootDispatcher < EventEmitter:

   constructor(@source, @target) =
      @set-max-listeners(Infinity)
      @channels = {=}
      @intercepts = {=}

   find-channel(path) =
      ch = @channels[path]
      if not ch:
         {p, c} = split-end(path)
         @open(p, c, {path = path})
      else:
         ch

   open(parent-path, name, base-options) =
      options = base-options & {
         parent-path = parent-path
         name = name
      }
      if parent-path == '/' and not name:
         @construct(null, .tabs, options)
      else:
         parent = @find-channel(parent-path)
         parent.open-channel(options)

   construct(parent-channel, type, options) =
      cls = channel-constructors[type]
      if not cls:
         return @construct(parent-channel, 'nil') with options & {
            message = '''
            <p>Failed to open channel of type <b>{type}</b></p>

            <p>That channel may be available as a plugin. If that plugin
            is installed, you may be able to use it by printing out this
            JSON command before opening the channel:</p>

            <pre>\{"command": "require", "path": "/", "pluginName": "{type}"\}</pre>

            <p>This assumes the plugin name is the same as the channel.</p>

            <p>If the plugin is not installed, try to install it with the
            following command:</p>

            <pre>npm install -g buche-{type}</pre>
            '''
            format = .html
         }
      ch = new cls(@, options)
      if parent-channel is null:
         @target.append-child(ch.element)
      expr-value @channels[options.path] = ch

   dispatch(message) =
      {'path', 'command'} each field ->
         if not message[field]:
            err = new BucheError('Missing field in message: "{field}"', message) with {
               fields = {field}
               channel = {path = '/'}
            }
            @dispatch(buche-exception-message(err, buche-error-channel))
            return

      try:
         if message.command is 'require':
            load-plugin(message.plugin-name)
            return

         path = message.path
         if @intercepts[message.command]:
            hierarchy(path) each p ->
               if @channels[p] as ch:
                  if ch.intercepts(message):
                     return ch.dispatch(message)
         if message.command is .open:
            {p, c} = split-end(path)
            @open(p, c, message)
         else:
            @find-channel(path).dispatch(message)
      catch BucheError? err:
         @dispatch(buche-exception-message(err, buche-error-channel))
      catch Error? e:
         err = new BucheError(e.message, message, {orig-error = e})
         @dispatch(buche-exception-message(err, buche-error-channel))

   run() =
      @source.read(m -> @dispatch(m))

   send(message) =
      @source.send(message)
