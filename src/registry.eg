
require:
   mkdirp
   path
   expand-tilde
   fs


provide:
   PluginManager
   ImportError


jsclass ImportError < Error:
   constructor(message) =
      super(message)


rq = require


class PluginManager:

   constructor(expand-tilde! @config-directory) =
      @import-failures = {=}
      @config-defaults-directory =
         path.join(__dirname, '../default-config')
      @config-files = {'package.json', 'index.js'}
      @ensure()
      @require = rq(@config-path('index.js')).require

   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   ;; Configuration directory ;;
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

   config-path(name='') =
      path.join(@config-directory, name)

   ensure() =
      if not fs.exists-sync(@config-directory):
         mkdirp.sync(@config-directory)
         mkdirp.sync(@config-path('node_modules'))
         @config-files each file ->
            fs.write-file-sync(@config-path(file)) with
               fs.read-file-sync(p, .utf8) where p =
                  path.join(@config-defaults-directory, file)

   ;;;;;;;;;;;;;;;;
   ;; Installing ;;
   ;;;;;;;;;;;;;;;;

   async npm-instance() =
      require: npm
      load = promisify(npm.load)
      await load(JSON.parse(fs.readFileSync(@config-path('package.json'))))

   async install(name) =
      npm = await @npm-instance()
      npm.prefix = @config-directory
      install = promisify(npm.install)
      await install('buche-{name}')

   async uninstall(name) =
      npm = await @npm-instance()
      npm.prefix = @config-directory
      uninstall = promisify(npm.uninstall)
      await uninstall('buche-{name}')

   ;;;;;;;;;;;;;;;
   ;; Resolving ;;
   ;;;;;;;;;;;;;;l

   _fetch(shortname) =
      fullname = 'buche-{shortname}'
      try:
         @require(fullname)
      catch e:
         if e.message !== 'Cannot find module \'{fullname}\'':
            throw e
         @import-failures[shortname] = true
         throw new ImportError with
            'Cannot find plugin "{shortname}". Try: `buche --install {shortname}`'

   get(p) =
      if p.starts-with('/') or p.starts-with('.'):
         full-path =
            match p:
               R"^/"? -> p
               else -> path.join(process.cwd(), p)
         plugin = rq(full-path)
         plugin._buche_name = p
         plugin
      else:
         plugin = @_fetch(p)
         plugin._buche_name = p
         plugin

   ;;;;;;;;;;;;;;;;;;;;;;
   ;; Loading a plugin ;;
   ;;;;;;;;;;;;;;;;;;;;;;

   load(name) =
      p = @get(name)
      @import(p)

   import(p) =
      if p.__installed:
         return
      p.buche-install()
      p.__installed = true
