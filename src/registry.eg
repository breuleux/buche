
require:
   fs
   path
   expand-tilde
   mkdirp


provide:
   channel-constructors
   channel-elements
   load-plugin
   register-element
   config-path
   get-config


globals:
   document


config-path(name='') =
   base = expand-tilde('~/.config/buche/')
   path.join(base, name)


get-config() =
   if not fs.exists-sync(config-path()):
      mkdirp.sync(config-path())
      mkdirp.sync(config-path('node_modules'))
      {'package.json', 'index.js'} each file ->
         fs.write-file-sync(config-path(file)) with
            fs.read-file-sync(p, .utf8) where p =
               path.join(__dirname, '../default-config', file)


rq = require
rquser = rq(config-path('index.js')).require
channel-constructors = {=}
channel-elements = {=}


require-plugin(p) =
   candidates = {{rq, './plugins/{p}'}, {rquser, 'buche-{p}'}}
   candidates each {rqfn, candidate} ->
      try:
         return rqfn(candidate)
      catch _:
         pass
   throw Error('Cannot find plugin "{p}". Try: `npm install -g buche-{p}`')


load-plugin(match p, exact = true) =
   String? when exact ->
      full-path =
         match p:
            R"^/"? -> p
            else -> path.join(process.cwd(), p)
      plugin = rq(full-path)
      load-plugin(plugin)
   String? ->
      plugin = require-plugin(p)
      load-plugin(plugin)
   else ->
      if not p.is-buche-plugin:
         throw Error('"{p}" is not a valid Buche plugin.')
      channel-constructors &: (p.channels or {=})
      items(p.components or {=}) each {name, cls} ->
         document.register-element(name, cls)


register-element(name, cls) =
   channel-elements[name] = cls
   document.register-element(name, cls)
