{"path": "/log", "command": "log", "contents": "<h2>Buche demo!</h2>", "format": "html"}
{"path": "/log", "command": "log", "contents": "Buche makes it easy to print <b>HTML</b>", "format": "html"}
{"path": "/log", "command": "log", "contents": "You can also print **Markdown**.", "format": "markdown"}
{"path": "/README", "command": "log", "contents": "\n# What is buche?\n\nBuche is a language-agnostic, serverless, extensible HTML \"logger\". No matter what language you are using, with only a little bit of code, it can do a lot of things:\n\n* Display log entries in HTML and Markdown.\n* Live plots.\n* Live graphs.\n* Simple interactive interfaces like REPLs.\n\nHere's why you might want to use it:\n\n* **Only stdout**: All you need to know to use `buche` is how to print JSON.\n* **Serverless**: You don't need to start a server or to connect to a server. Just write `buche <command> ...`\n* **Learn by example**: If you want to reproduce an existing command's output, just look at the JSON commands it prints (also: `buche --inspect`).\n* **Extensible**: It is possible to define new channel types and new components, and plugins can be installed directly through the UI!\n* **Easy to use over ssh**: `buche <command>` => `buche ssh <machine> <command>`. It just works.\n\nA lot of Buche's advantages boil down to the first point: Buche works on a stream of JSON commands, and uses `stdin` and `stdout` as its interface. This means you can take everything you know about manipulating these streams, everything you know about manipulating plain files, and leverage that to make Buche do what you want.\n\nFor example, you can save a command's output in a file, and play it back to Buche. If you have results in multiple files, you can merge them in a single Buche window as simply as `buche cat <file1> <file2> ...`. You can use `jq` or even `grep` to filter interesting parts, `sed` or `awk` for simple tweaks, etc. You can connect Buche to a fifo and funnel multiple commands into it. You can also write your own middleware to transform JSON streams in whatever way is useful to you.\n\n![plot](media/example-plot.png)\n\n## Install\n\nFor the time being, Buche must be installed through `npm`:\n\n```bash\nnpm install buche -g\n```\n\nThere will be self-contained packages in the future, when the tool is more stable.\n\nTo install plugins, you can write:\n\n```bash\nbuche --install <plugin-name>\n```\n\nIt is usually not necessary to do it on the command line, however. If a program outputs the `require` command to require a plugin, Buche will prompt the user to install it if it cannot be found.\n\n## Use\n\nBuche takes commands from stdout and (when applicable) outputs commands on stdin. This means you can simply pipe your application to buche: `<command> | buche` (if you have no need for stdin) or you can have buche run the command for you: `buche <command>`. (Note: in a script, you can use the shebang `#!/usr/bin/env buche <language>` to make the shell invoke buche when executing the script).\n\nThe best way to learn how to use Buche is by example: take a program that does something you would like to do, and either inspect its code, or inspect its output (which should be pretty simple most of the time). For this purpose, the `--inspect` flag makes buche print out all the commands that are exchanged between it and a program, in the following format: `-> <command_to_buche>` and `<- <command_from_buche>`. The former is what you should print, the latter is what you should parse and respond to (but don't worry too much about that, because it is only relevant if you want to write an interactive application).\n\n## Examples\n\nThere are several simple examples in this repository to get you started. They are [here](https://github.com/breuleux/buche/tree/master/examples). You can also clone the repository to get to them:\n\n```bash\ngit clone https://github.com/breuleux/buche\ncd buche/examples\n./demo.py\n```\n\nEach example is executable and uses the `--inspect` flag to show you the example's output stream. Executing an example works simply because the shebang in the file invokes `buche`, and you can look at it with `head -1 example`. It's all very simple. The code for most of the examples easily fit on a screen.\n\nSome Buche functionality and channels are not in any examples yet, unfortunately, but that will come.\n\n## Language support\n\nThis section contains advice about how to best use Buche with various programming languages. In general, it is possible to use it with any language without any specific support, but there are sometimes a few tricks to remember, and some languages may have libraries to make everything even easier.\n\n### Python\n\n**IMPORTANT:** By default, Python will buffer its output when it isn't directly outputting to a tty. That means the logging will be choppy, not very responsive, and might not even happen before the command is completely done executing. To solve this, pass the `-u` flag to `python`: instead of writing `buche python <file>`, write `buche python -u <file>`.\n\n**Package:** There is a `buche` package for Python >= 3.6 which you can install with `pip install buche`. `buche` gives a nicer syntax to open channels, log into them, and notably provides a `buche(object)` function that pretty-prints Python objects as HTML. These objects can also be interacted with by clicking on them. See [here](https://github.com/breuleux/pybuche) for documentation on the package. It is recommended to run `examples/pyrepl_nice.py` (in this repository) for a demonstration.\n\n## Stability\n\nThere is no stable release of Buche at the moment and the interface and commands may still change. Some capabilities may be removed in order to enhance security, such as the ability to inject scripts with full permissions in the output stream. Suggestions are welcome.\n\n## Writing extensions\n\nTODO.\n\nStill, if you feel motivated, you can look at [buche-cytoscape](https://github.com/breuleux/buche-cytoscape) and [buche-bokeh](https://github.com/breuleux/buche-cytoscape) to get a general idea of how to write an extension. The extension can be loaded directly:\n\n```json\n{\"command\":\"require\", \"path\":\"/\", \"pluginPath\":\"path/to/entry/point.js\"}\n```\n\nWhich is practical for development, or for really specialized extensions you only need for one project. It can require npm packages as needed. Otherwise, if you publish a plugin named `buche-xyz` on npm, it can be required like this:\n\n```json\n{\"command\":\"require\", \"path\":\"/\", \"pluginName\":\"xyz\"}\n```\n\nNote: these plugins are installed in `~/.config/buche/node_modules`.\n\n## More screenshots\n\nBecause you won't know what you want until you see it.\n\nGraphs:\n\n![graph](media/example-graph.png)\n\nSimple Python REPL:\n\n![repl](media/example-pyrepl.png)\n\nShiny Python REPL:\n\n![repl](media/example-pyrepl_nice.png)\n\nMerging the outputs of several commands (shift-click on tabs to do the split screen):\n\n![merge](media/example-merge.png)\n", "format": "markdown"}
{"path": "/source", "command": "log", "contents": "#!/usr/bin/env buche --inspect python -u\n\n# A simple demo.\n\nimport json\n\ndef buche(**args):\n    print(json.dumps(args))\n\ndef log(message, **args):\n    args.setdefault('path', '/log')\n    buche(command='log', contents=message, **args)\n\ndef html(message, **args):\n    log(message, format='html', **args)\n\ndef pre(message, **args):\n    log(message, format='pre', **args)\n\ndef markdown(message, **args):\n    log(message, format='markdown', **args)\n\nhtml('<h2>Buche demo!</h2>')\nhtml('Buche makes it easy to print <b>HTML</b>')\nmarkdown('You can also print **Markdown**.')\n\nmarkdown(open('../README.md').read(), path='/README')\npre(open(__file__).read(), path='/source')\nhtml('''Logs can be printed to multiple tabs. For example,\n     I have printed the README in the README tab, and the\n     source code for demo.py in the source tab.''')\n\nmarkdown(\"\"\"\n## Run more examples!\n\n* `buche --inspect -c 'python -u plot.py'` demonstrates live plotting.\n* `buche --inspect -c 'python -u tabs.py'` shows how to arrange tabs.\n* `buche --inspect -c 'python -u pyrepl.py'` implements a simple interactive\n  interpreter for Python.\n\"\"\")\n", "format": "pre"}
{"path": "/log", "command": "log", "contents": "Logs can be printed to multiple tabs. For example,\n     I have printed the README in the README tab, and the\n     source code for demo.py in the source tab.", "format": "html"}
{"path": "/log", "command": "log", "contents": "\n## Run more examples!\n\n* `buche --inspect -c 'python -u plot.py'` demonstrates live plotting.\n* `buche --inspect -c 'python -u tabs.py'` shows how to arrange tabs.\n* `buche --inspect -c 'python -u pyrepl.py'` implements a simple interactive\n  interpreter for Python.\n", "format": "markdown"}
